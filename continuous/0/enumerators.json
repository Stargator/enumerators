{"dependencies":[{"id":"dart.core","name":"dart:core","children":[{"id":"Object","name":"Object","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"==1()","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"kind":"method","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","line":"29"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","comment":"\nReturns a string representation of this object.\n","line":"48"},{"id":"noSuchMethod1()","name":"noSuchMethod","children":[{"ref":{"name":"InvocationMirror","refId":"dart.core/InvocationMirror"},"id":"invocation","name":"invocation","kind":"param"}],"kind":"method","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [InvocationMirror].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"hashCode","name":"hashCode","kind":"property","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"43"},{"ref":{"name":"Type","refId":"dart.core/Type"},"id":"runtimeType","name":"runtimeType","kind":"property","comment":"\nA representation of the runtime type of the object.\n","line":"65"},{"id":"Object0()","name":"Object","kind":"constructor","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"dart-sdk//lib/core/object.dart","kind":"class","comment":"\nEverything in Dart is an [Object].\n","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Iterator","name":"Iterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"moveNext0()","name":"moveNext","kind":"method","comment":"\nMoves to the next element. Returns true if [current] contains the next\nelement. Returns false, if no element was left.\n\nIt is safe to invoke [moveNext] even when the iterator is already\npositioned after the last element. In this case [moveNext] has no effect.\n","line":"35"},{"ref":{"name":"E","refId":"dart.core/Iterator/E"},"id":"current","name":"current","kind":"property","comment":"\nReturns the current element.\n\nReturn [:null:] if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved after the last element of the\n[Iterable].\n","line":"44"},{"id":"E","name":"E","kind":"typeparam"}],"uri":"dart-sdk//lib/core/iterator.dart","kind":"class","comment":"\nThe [Iterator] class provides methods to iterate over an object. It\nis transparently used by the for-in construct to test for the end\nof the iteration, and to get the elements.\n\nIf the object iterated over is changed during the iteration, the\nbehavior is unspecified.\n\nThe [Iterator] is initially positioned before the first element. Before\naccessing the first element the iterator must thus be advanced ([moveNext])\nto point to the first element. If there is no element left, then [moveNext]\nreturns false.\n\nA typical usage of an [Iterator] looks as follows:\n\n    var it = obj.iterator;\n    while (it.moveNext()) {\n      use(it.current);\n    }\n","line":"27"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"Iterable","name":"Iterable","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"id":"map1()","name":"map","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"51"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns a lazy [Iterable] where each element [:e:] of [this] is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","line":"51"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"where1()","name":"where","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"63"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [f].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","line":"63"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"id":"expand1()","name":"expand","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"75"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nExpand each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable will run through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and will call [f] for each element\nof this every time it's iterated.\n","line":"75"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"contains1()","name":"contains","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","kind":"param"}],"kind":"method","comment":"\nCheck whether the collection contains an element equal to [element].\n","line":"81"},{"returnType":{"name":"void","refId":"void"},"id":"forEach1()","name":"forEach","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"void","refId":"void"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"91"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nApplies the function [f] to each element of this collection.\n","line":"91"},{"id":"reduce2()","name":"reduce","children":[{"id":"initialValue","name":"initialValue","kind":"param","line":"109"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"combine","name":"combine","children":[{"id":"Function","name":"Function","children":[{"id":"previousValue","name":"previousValue","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"110"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"110"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param","line":"110"}],"kind":"method","comment":"\nReduce a collection to a single value by iteratively combining each element\nof the collection with an existing value using the provided function.\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n  iterable.reduce((prev, element) => prev + element);\n\n*UPCOMING API-CHANGE*: this method will soon be changed to not take\nan initial value: `iterable.reduce(min)`. Use [fold] instead.\n","line":"108"},{"id":"fold2()","name":"fold","children":[{"id":"initialValue","name":"initialValue","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"combine","name":"combine","children":[{"id":"Function","name":"Function","children":[{"id":"previousValue","name":"previousValue","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"125"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"125"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param","line":"125"}],"kind":"method","comment":"\nReduce a collection to a single value by iteratively combining each element\nof the collection with an existing value using the provided function.\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n  iterable.fold(0, (prev, element) => prev + element);\n","line":"124"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"every1()","name":"every","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"135"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns true if every elements of this collection satisify the\npredicate [f]. Returns false otherwise.\n","line":"135"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"join1()","name":"join","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"id":"separator","name":"separator","kind":"param"}],"kind":"method","comment":"\nConvert each element to a [String] and concatenate the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","line":"149"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"any1()","name":"any","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"element","name":"element","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"159"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns true if one element of this collection satisfies the\npredicate [f]. Returns false otherwise.\n","line":"159"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"toList1()","name":"toList","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"isNamed":true,"defaultValue":"true","isOptional":true,"id":"growable","name":"growable","kind":"param"}],"kind":"method","line":"166"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"toSet0()","name":"toSet","kind":"method","line":"168"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"min1()","name":"min","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"id":"compare","name":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"a","name":"a","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"199"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"b","name":"b","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"199"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param","line":"199"}],"kind":"method","comment":"\nFind the least element in the iterable.\n\nReturns null if the iterable is empty.\nOtherwise returns an element [:x:] of this [Iterable] so that\n[:x:] is not greater than [:y:] (that is, [:compare(x, y) <= 0:]) for all\nother elements [:y:] in the iterable.\n\nThe [compare] function must be a proper [Comparator<T>]. If a function is\nnot provided, [compare] defaults to [Comparable.compare].\n\n*Deprecated*. Use [reduce] with a binary min method if needed.\n","line":"198"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"max1()","name":"max","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"id":"compare","name":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"a","name":"a","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"225"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"b","name":"b","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"225"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param","line":"225"}],"kind":"method","comment":"\nFind the largest element in the iterable.\n\nReturns null if the iterable is empty.\nOtherwise returns an element [:x:] of this [Iterable] so that\n[:x:] is not smaller than [:y:] (that is, [:compare(x, y) >= 0:]) for all\nother elements [:y:] in the iterable.\n\nThe [compare] function must be a proper [Comparator<T>]. If a function is\nnot provided, [compare] defaults to [Comparable.compare].\n\n*Deprecated*. Use [reduce] with a binary max method if needed.\n","line":"224"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"take1()","name":"take","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"n","name":"n","kind":"param"}],"kind":"method","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if [this]\ncontains fewer than [n] elements.\n","line":"248"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"takeWhile1()","name":"takeWhile","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"261"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns an [Iterable] that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will start iterating over the elements of [this].\nWhen the iterator encounters an element [:e:] that does not satisfy [test],\nit discards [:e:] and moves into the finished state. That is, it will not\nask or provide any more elements.\n","line":"261"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"skip1()","name":"skip","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"n","name":"n","kind":"param"}],"kind":"method","comment":"\nReturns an [Iterable] that skips the first [n] elements.\n\nIf [this] has fewer than [n] elements, then the resulting [Iterable] will\nbe empty.\n","line":"271"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"skipWhile1()","name":"skipWhile","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"284"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns an [Iterable] that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will iterate over all elements of [this].\nAs long as the iterator's elements do not satisfy [test] they are\ndiscarded. Once an element satisfies the [test] the iterator stops testing\nand uses every element unconditionally.\n","line":"284"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"firstWhere2()","name":"firstWhere","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"339"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"Function","name":"Function","uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns the first element that satisfies the given predicate [f].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","line":"339"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"lastWhere2()","name":"lastWhere","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"355"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"Function","name":"Function","uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns the last element that satisfies the given predicate [f].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is [:null:], a [StateError] is\nthrown.\n","line":"355"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"singleWhere1()","name":"singleWhere","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"test","name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"Function","name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"value","name":"value","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"374"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\nReturns the single element that satisfies [f]. If no or more than one\nelement match then a [StateError] is thrown.\n","line":"374"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"elementAt1()","name":"elementAt","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","kind":"param"}],"kind":"method","comment":"\nReturns the [index]th element.\n\nIf [this] [Iterable] has fewer than [index] elements throws a\n[RangeError].\n\nNote: if [this] does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in [this].\n","line":"401"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"id":"iterator","name":"iterator","kind":"property","comment":"\nReturns an [Iterator] that iterates over this [Iterable] object.\n","line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"property","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","line":"176"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isEmpty","name":"isEmpty","kind":"property","comment":"\nReturns true if there is no element in this collection.\n","line":"240"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"first","name":"first","kind":"property","comment":"\nReturns the first element.\n\nIf [this] is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","line":"294"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"last","name":"last","kind":"property","comment":"\nReturns the last element.\n\nIf [this] is empty throws a [StateError].\n","line":"307"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"id":"single","name":"single","kind":"property","comment":"\nReturns the single element in [this].\n\nIf [this] is empty or has more than one element throws a [StateError].\n","line":"324"},{"id":"Iterable0()","name":"Iterable","kind":"constructor","line":"20"},{"id":"Iterable.generate2()","name":"Iterable.generate","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"count","name":"count","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"generator","name":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"id":"Function","name":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","uri":"dart-sdk//lib/core/iterable.dart","kind":"param","line":"32"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"constructor","comment":"\nCreate an [Iterable] that generates its elements dynamically.\n\nThe [Iterators] created by the [Iterable] will count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an [Iterable], [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","line":"32"},{"id":"E","name":"E","kind":"typeparam"}],"uri":"dart-sdk//lib/core/iterable.dart","kind":"class","comment":"\nThe [Iterable] interface allows to get an [Iterator] out of an\n[Iterable] object.\n\nThis interface is used by the for-in construct to iterate over an\n[Iterable] object.\nThe for-in construct takes an [Iterable] object at the right-hand\nside, and calls its [iterator] method to get an [Iterator] on it.\n\nA user-defined class that implements the [Iterable] interface can\nbe used as the right-hand side of a for-in construct.\n","line":"19"}],"uri":"dart-sdk//lib/core/core.dart","kind":"library","line":"5"}],"id":"enumerators","children":[{"returnType":{"name":"Enumeration","refId":"enumerators/Enumeration"},"id":"fix1()","name":"fix","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"Enumeration","refId":"enumerators/Enumeration"},"id":"Function","name":"Function","children":[{"id":"Enumeration","name":"Enumeration","uri":"file:///tmp/tmp.9Pn3LPRfzz/dart-enumerators/lib/enumerators.dart","kind":"param","line":"345"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","line":"345"},{"returnType":{"name":"Enumeration","refId":"enumerators/Enumeration"},"id":"singleton1()","name":"singleton","children":[{"id":"x","name":"x","kind":"param"}],"kind":"method","line":"344"},{"returnType":{"name":"Enumeration","refId":"enumerators/Enumeration"},"id":"empty0()","name":"empty","kind":"method","line":"343"},{"superclass":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"A","refId":"enumerators/_LazyListIterator/A"}]},"id":"_LazyListIterator","name":"_LazyListIterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"moveNext0()","name":"moveNext","kind":"method","line":"130"},{"ref":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"A","refId":"enumerators/_LazyListIterator/A"}]},"id":"list","name":"list","kind":"variable","line":"126"},{"ref":{"name":"A","refId":"enumerators/_LazyListIterator/A"},"id":"current","name":"current","kind":"variable","line":"127"},{"id":"_LazyListIterator1()","name":"_LazyListIterator","children":[{"initializedField":{"name":"list","refId":"enumerators/_LazyListIterator/list"},"ref":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"A","refId":"enumerators/_LazyListIterator/A"}]},"id":"list","name":"list","kind":"param"}],"kind":"constructor","line":"128"},{"id":"A","name":"A","kind":"typeparam"}],"uri":"file:///tmp/tmp.9Pn3LPRfzz/dart-enumerators/lib/src/lazy_list.dart","kind":"class","isPrivate":true,"line":"125"},{"superclass":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"A","refId":"enumerators/_Cons/A"}]},"id":"_Cons","name":"_Cons","children":[{"isOperator":true,"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"+1()","name":"+","children":[{"ref":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"s","name":"s","kind":"param"}],"kind":"method","line":"99"},{"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"_lazyPlus1()","name":"_lazyPlus","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"gen","name":"gen","children":[{"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"Function","name":"Function","uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","isPrivate":true,"line":"102"},{"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"concat0()","name":"concat","kind":"method","line":"105"},{"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"map1()","name":"map","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"id":"Function","name":"Function","children":[{"ref":{"name":"A","refId":"enumerators/_Cons/A"},"id":"x","name":"x","uri":"file:///tmp/tmp.9Pn3LPRfzz/dart-enumerators/lib/src/lazy_list.dart","kind":"param","line":"114"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","line":"114"},{"returnType":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"LazyList","refId":"enumerators/LazyList"}]},"id":"tails0()","name":"tails","kind":"method","line":"117"},{"isOperator":true,"returnType":{"name":"A","refId":"enumerators/_Cons/A"},"id":"[]1()","name":"[]","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","kind":"param"}],"kind":"method","line":"120"},{"id":"tail","name":"tail","kind":"property","line":"92"},{"isFinal":true,"ref":{"name":"A","refId":"enumerators/_Cons/A"},"id":"head","name":"head","kind":"variable","line":"84"},{"isFinal":true,"ref":{"name":"Function","refId":"dart.core/Function"},"id":"gen","name":"gen","kind":"variable","line":"85"},{"ref":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"A","refId":"enumerators/_Cons/A"}]},"id":"_cachedTail","name":"_cachedTail","kind":"variable","isPrivate":true,"line":"86"},{"isFinal":true,"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isEmpty","name":"isEmpty","kind":"variable","line":"90"},{"id":"_Cons2()","name":"_Cons","children":[{"initializedField":{"name":"head","refId":"enumerators/_Cons/head"},"ref":{"name":"A","refId":"enumerators/_Cons/A"},"id":"head","name":"head","kind":"param"},{"initializedField":{"name":"gen","refId":"enumerators/_Cons/gen"},"ref":{"name":"Function","refId":"dart.core/Function"},"id":"gen","name":"gen","kind":"param"}],"kind":"constructor","line":"88"},{"id":"A","name":"A","kind":"typeparam"}],"uri":"file:///tmp/tmp.9Pn3LPRfzz/dart-enumerators/lib/src/lazy_list.dart","kind":"class","isPrivate":true,"line":"83"},{"superclass":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"A","refId":"enumerators/_Empty/A"}]},"id":"_Empty","name":"_Empty","children":[{"isOperator":true,"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"+1()","name":"+","children":[{"ref":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"s","name":"s","kind":"param"}],"kind":"method","line":"73"},{"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"concat0()","name":"concat","kind":"method","line":"74"},{"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"map1()","name":"map","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"id":"Function","name":"Function","children":[{"ref":{"name":"A","refId":"enumerators/_Empty/A"},"id":"x","name":"x","uri":"file:///tmp/tmp.9Pn3LPRfzz/dart-enumerators/lib/src/lazy_list.dart","kind":"param","line":"75"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","line":"75"},{"returnType":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"LazyList","refId":"enumerators/LazyList"}]},"id":"tails0()","name":"tails","kind":"method","line":"76"},{"isOperator":true,"id":"[]1()","name":"[]","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","kind":"param"}],"kind":"method","line":"77"},{"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"_lazyPlus1()","name":"_lazyPlus","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"gen","name":"gen","children":[{"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"Function","name":"Function","uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","isPrivate":true,"line":"80"},{"id":"head","name":"head","kind":"property","line":"67"},{"id":"tail","name":"tail","kind":"property","line":"70"},{"isFinal":true,"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isEmpty","name":"isEmpty","kind":"variable","line":"66"},{"id":"_Empty0()","name":"_Empty","kind":"constructor","line":"65"},{"id":"A","name":"A","kind":"typeparam"}],"uri":"file:///tmp/tmp.9Pn3LPRfzz/dart-enumerators/lib/src/lazy_list.dart","kind":"class","isPrivate":true,"line":"64"},{"superclass":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"A","refId":"enumerators/LazyList/A"}]},"isAbstract":true,"id":"LazyList","name":"LazyList","children":[{"isOperator":true,"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"+1()","name":"+","children":[{"ref":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"s","name":"s","kind":"param"}],"kind":"method","comment":"\n[s] appended to [this].\n","line":"23"},{"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"concat0()","name":"concat","kind":"method","comment":"\nConcatenates this, Assuming [: A = Stream<Stream<B>> :].\n","line":"28"},{"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"map1()","name":"map","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"id":"Function","name":"Function","children":[{"ref":{"name":"A","refId":"enumerators/LazyList/A"},"id":"x","name":"x","uri":"file:///tmp/tmp.9Pn3LPRfzz/dart-enumerators/lib/src/lazy_list.dart","kind":"param","line":"33"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\n[LazyList] is a functor.\n","line":"33"},{"isOperator":true,"returnType":{"name":"A","refId":"enumerators/LazyList/A"},"id":"[]1()","name":"[]","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","kind":"param"}],"kind":"method","comment":"\nLinear indexing.\n","line":"38"},{"returnType":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"LazyList","refId":"enumerators/LazyList"}]},"id":"tails0()","name":"tails","kind":"method","line":"40"},{"isOperator":true,"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"*1()","name":"*","children":[{"ref":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"s","name":"s","kind":"param"}],"kind":"method","comment":"\nCartesian product.\n","line":"45"},{"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"apply1()","name":"apply","children":[{"ref":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"s","name":"s","kind":"param"}],"kind":"method","comment":"\n[LazyList] is an applicative functor.\n","line":"51"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","line":"55"},{"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"_lazyPlus1()","name":"_lazyPlus","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"gen","name":"gen","children":[{"returnType":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"Function","name":"Function","uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","isPrivate":true,"line":"57"},{"ref":{"name":"A","refId":"enumerators/LazyList/A"},"id":"head","name":"head","kind":"property","line":"17"},{"ref":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"A","refId":"enumerators/LazyList/A"}]},"id":"tail","name":"tail","kind":"property","line":"18"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"A","refId":"enumerators/LazyList/A"}]},"id":"iterator","name":"iterator","kind":"property","line":"61"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"id":"counter","name":"counter","kind":"variable","line":"53"},{"id":"LazyList._0()","name":"LazyList._","kind":"constructor","isPrivate":true,"line":"12"},{"id":"LazyList.empty0()","name":"LazyList.empty","kind":"constructor","line":"13"},{"id":"LazyList.cons2()","name":"LazyList.cons","children":[{"ref":{"name":"A","refId":"enumerators/LazyList/A"},"id":"head","name":"head","kind":"param"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"gen","name":"gen","children":[{"returnType":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"A","refId":"enumerators/LazyList/A"}]},"id":"Function","name":"Function","uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"constructor","line":"14"},{"id":"LazyList.singleton1()","name":"LazyList.singleton","children":[{"ref":{"name":"A","refId":"enumerators/LazyList/A"},"id":"elem","name":"elem","kind":"param"}],"kind":"constructor","line":"15"},{"id":"A","name":"A","kind":"typeparam"}],"uri":"file:///tmp/tmp.9Pn3LPRfzz/dart-enumerators/lib/src/lazy_list.dart","kind":"class","comment":"\nA lazy list, possibly infinite.\n","line":"11"},{"superclass":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"A","refId":"enumerators/Enumeration/A"}]},"id":"Enumeration","name":"Enumeration","children":[{"isOperator":true,"returnType":{"name":"A","refId":"enumerators/Enumeration/A"},"id":"[]1()","name":"[]","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"i","name":"i","kind":"param"}],"kind":"method","line":"238"},{"isStatic":true,"returnType":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"Finite","refId":"enumerators/Finite"}]},"id":"_zipPlus2()","name":"_zipPlus","children":[{"ref":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"Finite","refId":"enumerators/Finite"}]},"id":"xs","name":"xs","kind":"param"},{"ref":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"Finite","refId":"enumerators/Finite"}]},"id":"ys","name":"ys","kind":"param"}],"kind":"method","isPrivate":true,"line":"251"},{"isOperator":true,"returnType":{"name":"Enumeration","refId":"enumerators/Enumeration","arguments":[{"name":"A","refId":"enumerators/Enumeration/A"}]},"id":"+1()","name":"+","children":[{"ref":{"name":"Enumeration","refId":"enumerators/Enumeration","arguments":[{"name":"A","refId":"enumerators/Enumeration/A"}]},"id":"e","name":"e","kind":"param"}],"kind":"method","comment":"\nDisjoint union (it is up to the user to make sure that operands are\ndisjoint).\n","line":"261"},{"returnType":{"name":"Enumeration","refId":"enumerators/Enumeration"},"id":"map1()","name":"map","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"id":"Function","name":"Function","children":[{"ref":{"name":"A","refId":"enumerators/Enumeration/A"},"id":"x","name":"x","uri":"file:///tmp/tmp.9Pn3LPRfzz/dart-enumerators/lib/enumerators.dart","kind":"param","line":"268"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\n[Enumeration] is a functor.\n","line":"268"},{"isStatic":true,"returnType":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"LazyList","refId":"enumerators/LazyList"}]},"id":"_reversals1()","name":"_reversals","children":[{"ref":{"name":"LazyList","refId":"enumerators/LazyList"},"id":"l","name":"l","kind":"param"}],"kind":"method","comment":"\n[: _reversals([1,2,3,...]) :] is [: [[1], [2,1], [3,2,1], ...] :].\n","isPrivate":true,"line":"275"},{"isStatic":true,"id":"_prod2()","name":"_prod","children":[{"ref":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"Finite","refId":"enumerators/Finite"}]},"id":"xs","name":"xs","kind":"param"},{"ref":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"Finite","refId":"enumerators/Finite"}]}]},"id":"yss","name":"yss","kind":"param"}],"kind":"method","isPrivate":true,"line":"284"},{"isStatic":true,"id":"_conv2()","name":"_conv","children":[{"ref":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"Finite","refId":"enumerators/Finite"}]},"id":"xs","name":"xs","kind":"param"},{"ref":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"Finite","refId":"enumerators/Finite"}]},"id":"ys","name":"ys","kind":"param"}],"kind":"method","isPrivate":true,"line":"304"},{"isOperator":true,"returnType":{"name":"Enumeration","refId":"enumerators/Enumeration","arguments":[{"name":"Pair","refId":"enumerators/Pair"}]},"id":"*1()","name":"*","children":[{"ref":{"name":"Enumeration","refId":"enumerators/Enumeration","arguments":[{"name":"A","refId":"enumerators/Enumeration/A"}]},"id":"e","name":"e","kind":"param"}],"kind":"method","comment":"\nCartesian product.\n","line":"319"},{"returnType":{"name":"Enumeration","refId":"enumerators/Enumeration"},"id":"apply1()","name":"apply","children":[{"ref":{"name":"Enumeration","refId":"enumerators/Enumeration"},"id":"e","name":"e","kind":"param"}],"kind":"method","comment":"\n[Enumeration] is an applicative functor.\n","line":"328"},{"returnType":{"name":"Enumeration","refId":"enumerators/Enumeration","arguments":[{"name":"A","refId":"enumerators/Enumeration/A"}]},"id":"pay0()","name":"pay","kind":"method","comment":"\nPays for one recursive call.\n","line":"334"},{"id":"toString0()","name":"toString","kind":"method","line":"338"},{"ref":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/Enumeration/A"}]}]},"id":"parts","name":"parts","kind":"property","line":"236"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"A","refId":"enumerators/Enumeration/A"}]},"id":"iterator","name":"iterator","kind":"property","line":"249"},{"ref":{"name":"Thunk","refId":"enumerators/Thunk","arguments":[{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/Enumeration/A"}]}]}]},"id":"thunk","name":"thunk","kind":"variable","line":"220"},{"id":"Enumeration1()","name":"Enumeration","children":[{"initializedField":{"name":"thunk","refId":"enumerators/Enumeration/thunk"},"ref":{"name":"Thunk","refId":"enumerators/Thunk","arguments":[{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/Enumeration/A"}]}]}]},"id":"thunk","name":"thunk","kind":"param"}],"kind":"constructor","line":"222"},{"id":"Enumeration.empty0()","name":"Enumeration.empty","kind":"constructor","line":"223"},{"id":"Enumeration.singleton1()","name":"Enumeration.singleton","children":[{"ref":{"name":"A","refId":"enumerators/Enumeration/A"},"id":"x","name":"x","kind":"param"}],"kind":"constructor","line":"226"},{"id":"Enumeration.fix1()","name":"Enumeration.fix","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"Enumeration","refId":"enumerators/Enumeration"},"id":"Function","name":"Function","children":[{"id":"Enumeration","name":"Enumeration","uri":"file:///tmp/tmp.9Pn3LPRfzz/dart-enumerators/lib/enumerators.dart","kind":"param","line":"229"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"constructor","line":"229"},{"id":"A","name":"A","kind":"typeparam"}],"kind":"class","comment":"\nAn enumeration of finite parts of A.\n","line":"219"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Thunk","name":"Thunk","children":[{"ref":{"name":"A","refId":"enumerators/Thunk/A"},"id":"value","name":"value","kind":"property","line":"208"},{"ref":{"name":"A","refId":"enumerators/Thunk/A"},"id":"_cached","name":"_cached","kind":"variable","isPrivate":true,"line":"205"},{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"gen","name":"gen","kind":"variable","line":"206"},{"id":"Thunk1()","name":"Thunk","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"gen","name":"gen","children":[{"returnType":{"name":"A","refId":"enumerators/Thunk/A"},"id":"Function","name":"Function","uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"constructor","line":"207"},{"id":"A","name":"A","kind":"typeparam"}],"kind":"class","line":"204"},{"superclass":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"A","refId":"enumerators/_FiniteIterator/A"}]},"id":"_FiniteIterator","name":"_FiniteIterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"moveNext0()","name":"moveNext","kind":"method","line":"190"},{"isFinal":true,"ref":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/_FiniteIterator/A"}]},"id":"finite","name":"finite","kind":"variable","line":"184"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","kind":"variable","line":"185"},{"ref":{"name":"A","refId":"enumerators/_FiniteIterator/A"},"id":"current","name":"current","kind":"variable","line":"186"},{"id":"_FiniteIterator1()","name":"_FiniteIterator","children":[{"initializedField":{"name":"finite","refId":"enumerators/_FiniteIterator/finite"},"ref":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/_FiniteIterator/A"}]},"id":"finite","name":"finite","kind":"param"}],"kind":"constructor","line":"188"},{"id":"A","name":"A","kind":"typeparam"}],"kind":"class","isPrivate":true,"line":"183"},{"superclass":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"B","refId":"enumerators/_FMap/B"}]},"id":"_FMap","name":"_FMap","children":[{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"variable","line":"174"},{"isFinal":true,"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","kind":"variable","line":"175"},{"isFinal":true,"ref":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/_FMap/A"}]},"id":"mapped","name":"mapped","kind":"variable","line":"176"},{"id":"_FMap2()","name":"_FMap","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"returnType":{"name":"B","refId":"enumerators/_FMap/B"},"id":"Function","name":"Function","children":[{"ref":{"name":"A","refId":"enumerators/_FMap/A"},"id":"x","name":"x","uri":"file:///tmp/tmp.9Pn3LPRfzz/dart-enumerators/lib/enumerators.dart","kind":"param","line":"177"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"},{"ref":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/_FMap/A"}]},"id":"mapped","name":"mapped","kind":"param"}],"kind":"constructor","line":"177"},{"id":"A","name":"A","kind":"typeparam"},{"id":"B","name":"B","kind":"typeparam"}],"kind":"class","isPrivate":true,"line":"173"},{"superclass":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/_FProd/A"}]},"id":"_FProd","name":"_FProd","children":[{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"variable","line":"164"},{"isFinal":true,"ref":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/_FProd/A"}]},"id":"fin1","name":"fin1","kind":"variable","line":"165"},{"isFinal":true,"ref":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/_FProd/A"}]},"id":"fin2","name":"fin2","kind":"variable","line":"166"},{"id":"_FProd2()","name":"_FProd","children":[{"id":"fin1","name":"fin1","kind":"param"},{"id":"fin2","name":"fin2","kind":"param"}],"kind":"constructor","line":"167"},{"id":"A","name":"A","kind":"typeparam"}],"kind":"class","isPrivate":true,"line":"163"},{"superclass":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/_FSum/A"}]},"id":"_FSum","name":"_FSum","children":[{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"variable","line":"154"},{"isFinal":true,"ref":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/_FSum/A"}]},"id":"fin1","name":"fin1","kind":"variable","line":"155"},{"isFinal":true,"ref":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/_FSum/A"}]},"id":"fin2","name":"fin2","kind":"variable","line":"156"},{"id":"_FSum2()","name":"_FSum","children":[{"id":"fin1","name":"fin1","kind":"param"},{"id":"fin2","name":"fin2","kind":"param"}],"kind":"constructor","line":"157"},{"id":"A","name":"A","kind":"typeparam"}],"kind":"class","isPrivate":true,"line":"153"},{"superclass":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/_FSingleton/A"}]},"id":"_FSingleton","name":"_FSingleton","children":[{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"variable","line":"147"},{"isFinal":true,"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isEmpty","name":"isEmpty","kind":"variable","line":"148"},{"isFinal":true,"ref":{"name":"A","refId":"enumerators/_FSingleton/A"},"id":"value","name":"value","kind":"variable","line":"149"},{"id":"_FSingleton1()","name":"_FSingleton","children":[{"initializedField":{"name":"value","refId":"enumerators/_FSingleton/value"},"ref":{"name":"A","refId":"enumerators/_FSingleton/A"},"id":"value","name":"value","kind":"param"}],"kind":"constructor","line":"150"},{"id":"A","name":"A","kind":"typeparam"}],"kind":"class","isPrivate":true,"line":"146"},{"superclass":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/_FEmpty/A"}]},"id":"_FEmpty","name":"_FEmpty","children":[{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"length","name":"length","kind":"variable","line":"141"},{"isFinal":true,"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isEmpty","name":"isEmpty","kind":"variable","line":"142"},{"id":"_FEmpty0()","name":"_FEmpty","kind":"constructor","line":"143"},{"id":"A","name":"A","kind":"typeparam"}],"kind":"class","isPrivate":true,"line":"140"},{"superclass":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"A","refId":"enumerators/Finite/A"}]},"isAbstract":true,"id":"Finite","name":"Finite","children":[{"isOperator":true,"returnType":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/Finite/A"}]},"id":"+1()","name":"+","children":[{"ref":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"A","refId":"enumerators/Finite/A"}]},"id":"fin","name":"fin","kind":"param"}],"kind":"method","comment":"\nUnion.\n","line":"45"},{"isOperator":true,"returnType":{"name":"Finite","refId":"enumerators/Finite","arguments":[{"name":"Pair","refId":"enumerators/Pair"}]},"id":"*1()","name":"*","children":[{"ref":{"name":"Finite","refId":"enumerators/Finite"},"id":"fin","name":"fin","kind":"param"}],"kind":"method","comment":"\nCartesian product.\n","line":"50"},{"returnType":{"name":"Finite","refId":"enumerators/Finite"},"id":"map1()","name":"map","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","children":[{"id":"Function","name":"Function","children":[{"ref":{"name":"A","refId":"enumerators/Finite/A"},"id":"x","name":"x","uri":"file:///tmp/tmp.9Pn3LPRfzz/dart-enumerators/lib/enumerators.dart","kind":"param","line":"55"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param"}],"kind":"method","comment":"\n[Finite] is a functor.\n","line":"55"},{"returnType":{"name":"Finite","refId":"enumerators/Finite"},"id":"apply1()","name":"apply","children":[{"ref":{"name":"Finite","refId":"enumerators/Finite"},"id":"fin","name":"fin","kind":"param"}],"kind":"method","comment":"\n[Finite] is an applicative functor.\n","line":"60"},{"isOperator":true,"returnType":{"name":"A","refId":"enumerators/Finite/A"},"id":"[]1()","name":"[]","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","kind":"param"}],"kind":"method","line":"63"},{"isStatic":true,"id":"_eval2()","name":"_eval","children":[{"ref":{"name":"Finite","refId":"enumerators/Finite"},"id":"finite","name":"finite","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","kind":"param"}],"kind":"method","isPrivate":true,"line":"65"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","line":"105"},{"returnType":{"name":"LazyList","refId":"enumerators/LazyList","arguments":[{"name":"A","refId":"enumerators/Finite/A"}]},"id":"toLazyList0()","name":"toLazyList","kind":"method","line":"112"},{"returnType":{"name":"A","refId":"enumerators/Finite/A"},"id":"elementAt1()","name":"elementAt","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"index","name":"index","kind":"param"}],"kind":"method","line":"123"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"A","refId":"enumerators/Finite/A"}]},"id":"iterator","name":"iterator","kind":"property","line":"110"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"isEmpty","name":"isEmpty","kind":"property","line":"121"},{"ref":{"name":"A","refId":"enumerators/Finite/A"},"id":"first","name":"first","kind":"property","line":"125"},{"ref":{"name":"A","refId":"enumerators/Finite/A"},"id":"last","name":"last","kind":"property","line":"132"},{"id":"Finite0()","name":"Finite","kind":"constructor","line":"38"},{"id":"Finite.empty0()","name":"Finite.empty","kind":"constructor","line":"39"},{"id":"Finite.singleton1()","name":"Finite.singleton","children":[{"ref":{"name":"A","refId":"enumerators/Finite/A"},"id":"x","name":"x","kind":"param"}],"kind":"constructor","line":"40"},{"id":"A","name":"A","kind":"typeparam"}],"kind":"class","line":"37"},{"superclass":{"name":"_Instruction","refId":"enumerators/_Instruction"},"id":"_IEval","name":"_IEval","children":[{"id":"toString0()","name":"toString","kind":"method","line":"34"},{"isFinal":true,"ref":{"name":"Finite","refId":"enumerators/Finite"},"id":"fin","name":"fin","kind":"variable","line":"31"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"id":"i","name":"i","kind":"variable","line":"32"},{"id":"_IEval2()","name":"_IEval","children":[{"initializedField":{"name":"fin","refId":"enumerators/_IEval/fin"},"ref":{"name":"Finite","refId":"enumerators/Finite"},"id":"fin","name":"fin","kind":"param"},{"initializedField":{"name":"i","refId":"enumerators/_IEval/i"},"ref":{"name":"int","refId":"dart.core/int"},"id":"i","name":"i","kind":"param"}],"kind":"constructor","line":"33"}],"kind":"class","isPrivate":true,"line":"30"},{"superclass":{"name":"_Instruction","refId":"enumerators/_Instruction"},"id":"_IMap","name":"_IMap","children":[{"isFinal":true,"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","kind":"variable","line":"27"},{"id":"_IMap1()","name":"_IMap","children":[{"initializedField":{"name":"f","refId":"enumerators/_IMap/f"},"ref":{"name":"Function","refId":"dart.core/Function"},"id":"f","name":"f","kind":"param"}],"kind":"constructor","line":"28"}],"kind":"class","isPrivate":true,"line":"26"},{"superclass":{"name":"_Instruction","refId":"enumerators/_Instruction"},"id":"_IProd","name":"_IProd","kind":"class","isPrivate":true,"line":"25"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"_Instruction","name":"_Instruction","kind":"class","isPrivate":true,"line":"24"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Pair","name":"Pair","children":[{"returnType":{"name":"Pair","refId":"enumerators/Pair","arguments":[{"name":"A","refId":"enumerators/Pair/A"},{"name":"B","refId":"enumerators/Pair/B"}]},"id":"setFst1()","name":"setFst","children":[{"ref":{"name":"A","refId":"enumerators/Pair/A"},"id":"x","name":"x","kind":"param"}],"kind":"method","line":"14"},{"returnType":{"name":"Pair","refId":"enumerators/Pair","arguments":[{"name":"A","refId":"enumerators/Pair/A"},{"name":"B","refId":"enumerators/Pair/B"}]},"id":"setSnd1()","name":"setSnd","children":[{"ref":{"name":"B","refId":"enumerators/Pair/B"},"id":"x","name":"x","kind":"param"}],"kind":"method","line":"15"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"==1()","name":"==","children":[{"ref":{"name":"Pair","refId":"enumerators/Pair","arguments":[{"name":"A","refId":"enumerators/Pair/A"},{"name":"B","refId":"enumerators/Pair/B"}]},"id":"other","name":"other","kind":"param"}],"kind":"method","line":"17"},{"id":"toString0()","name":"toString","kind":"method","line":"21"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"hashCode","name":"hashCode","kind":"property","line":"16"},{"isFinal":true,"ref":{"name":"A","refId":"enumerators/Pair/A"},"id":"fst","name":"fst","kind":"variable","line":"11"},{"isFinal":true,"ref":{"name":"B","refId":"enumerators/Pair/B"},"id":"snd","name":"snd","kind":"variable","line":"12"},{"id":"Pair2()","name":"Pair","children":[{"initializedField":{"name":"fst","refId":"enumerators/Pair/fst"},"ref":{"name":"A","refId":"enumerators/Pair/A"},"id":"fst","name":"fst","kind":"param"},{"initializedField":{"name":"snd","refId":"enumerators/Pair/snd"},"ref":{"name":"B","refId":"enumerators/Pair/B"},"id":"snd","name":"snd","kind":"param"}],"kind":"constructor","line":"13"},{"id":"A","name":"A","kind":"typeparam"},{"id":"B","name":"B","kind":"typeparam"}],"kind":"class","line":"10"}],"uri":"file:///tmp/tmp.9Pn3LPRfzz/dart-enumerators/lib/enumerators.dart","kind":"library","line":"6"}